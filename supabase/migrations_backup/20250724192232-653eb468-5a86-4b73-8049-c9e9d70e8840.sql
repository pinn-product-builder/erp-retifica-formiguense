-- Criar usuários de demonstração diretamente
INSERT INTO auth.users (
  instance_id,
  id,
  aud,
  role,
  email,
  encrypted_password,
  email_confirmed_at,
  confirmation_sent_at,
  confirmation_token,
  recovery_sent_at,
  recovery_token,
  email_change_sent_at,
  email_change,
  email_change_token_new,
  email_change_token_current,
  last_sign_in_at,
  raw_app_meta_data,
  raw_user_meta_data,
  is_super_admin,
  created_at,
  updated_at,
  phone,
  phone_confirmed_at,
  phone_change,
  phone_change_token,
  phone_change_sent_at,
  email_change_confirm_status,
  banned_until,
  reauthentication_token,
  reauthentication_sent_at,
  is_sso_user,
  deleted_at
) 
VALUES 
(
  '00000000-0000-0000-0000-000000000000',
  gen_random_uuid(),
  'authenticated',
  'authenticated',
  'admin@retificas.com',
  crypt('admin123', gen_salt('bf')),
  NOW(),
  NOW(),
  '',
  NULL,
  '',
  NULL,
  '',
  '',
  '',
  NULL,
  '{"provider": "email", "providers": ["email"]}',
  '{"name": "Administrador"}',
  FALSE,
  NOW(),
  NOW(),
  NULL,
  NULL,
  '',
  '',
  NULL,
  0,
  NULL,
  '',
  NULL,
  FALSE,
  NULL
),
(
  '00000000-0000-0000-0000-000000000000',
  gen_random_uuid(),
  'authenticated',
  'authenticated',
  'funcionario@retificas.com',
  crypt('func123', gen_salt('bf')),
  NOW(),
  NOW(),
  '',
  NULL,
  '',
  NULL,
  '',
  '',
  '',
  NULL,
  '{"provider": "email", "providers": ["email"]}',
  '{"name": "Funcionário"}',
  FALSE,
  NOW(),
  NOW(),
  NULL,
  NULL,
  '',
  '',
  NULL,
  0,
  NULL,
  '',
  NULL,
  FALSE,
  NULL
);

-- Criar perfis correspondentes (o trigger deveria fazer isso, mas vamos garantir)
INSERT INTO public.profiles (user_id, name, role)
SELECT 
  u.id,
  u.raw_user_meta_data ->> 'name',
  CASE 
    WHEN u.email = 'admin@retificas.com' THEN 'admin'
    ELSE 'employee'
  END
FROM auth.users u
WHERE u.email IN ('admin@retificas.com', 'funcionario@retificas.com')
ON CONFLICT (user_id) DO NOTHING;